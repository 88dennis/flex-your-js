<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Other Use Cases</title>
</head>

<body>
    <h1>JAVASCRIPT USE CASES</h1>

    <script>
        //=========
        //DAY 4
        //==========

        //Write a JavaScript function to find an array contains a specific element. Test data:


        let arr = [2, 5, 9, 6];

        function contains(arr, element) {
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] === element) {
                    return true;
                }
            }
            return false;
        }
        arr = [2, 5, 9, 6];
        console.log(contains(arr, 5));


        //Write a JavaScript function to create a specified number of elements and pre-filled string value array. 
        function array_filled(n, val) {
            return Array.apply(null, Array(n)).map(String.prototype.valueOf, val);
        }
        console.log(array_filled(3, 'default value'));
        console.log(array_filled(4, 'password'));

        function array_filled(n, val) {
            return Array(...Array(n)).map(String.prototype.valueOf, val);
        }
        console.log(array_filled(3, 'default value'));
        console.log(array_filled(4, 'password'));

        //Write a JavaScript function to filter false, null, 0 and blank values from an array. Test Data :console.log(filter_array_values([58, '', 'abcd', true, null, false, 0])); [58, "abcd", true] 

        function filter_array_values(arr) {
            arr = arr.filter(isEligible);
            return arr;
        }

        function isEligible(value) {
            if (value !== false || value !== null || value !== 0 || value !== "") {
                return value;
            }
        }
        console.log(filter_array_values([58, '', 'abcd', true, null, false, 0]));



        function filter_array_values(arr) {
            arr = arr.filter(isEligible);
            return arr;
        }

        function isEligible(value) {
            if (value !== false || value !== null || value !== 0 || value !== "") {
                return value;
            }
        }
        console.log(filter_array_values([58, '', 'abcd', true, null, false, 0]));



        //Write a JavaScript function to find the unique elements from two arrays. Test 

        function difference(arr1, arr2) {
            var a1 = flatten(arr1, true);
            var a2 = flatten(arr2, true);
            var a = [],
                diff = [];
            for (var i = 0; i < a1.length; i++) {
                a[a1[i]] = false;
            }

            for (i = 0; i < a2.length; i++) {
                if (a[a2[i]] === true) {
                    delete a[a2[i]];
                } else {
                    a[a2[i]] = true;
                }
                for (var k in a) {
                    diff.push(k)
                };
                return diff;
            }
        }

        var flatten = function (a, shallow, r) {
            if (!r) {
                r = [];
            }
            if (shallow) {
                return r.concat.apply(r, a);
            }
            for (i = 0; i < a.length; i++) {
                if (a[i].constructor == Array) {
                    flatten(a[i], shallow, r);
                } else {
                    r.push(a[i]);
                }
            }
            return r;
        };
        console.log(difference([1, 2, 3], [100, 2, 1, 10]));
        console.log(difference([1, 2, 3, 4, 5], [1, [2],
            [3, [
                [4]
            ]],
            [5, 6]
        ]));
        console.log(difference([1, 2, 3], [100, 2, 1, 10]));


        function difference(arr1, arr2) {
            const a1 = flatten(arr1, true);
            const a2 = flatten(arr2, true);
            const a = [];
            const diff = [];
            for (var i = 0; i < a1.length; i++) {
                a[a1[i]] = false;
            }
            for (i = 0; i < a2.length; i++) {

                if (a[a2[i]] === true) {
                    delete a[a2[i]];
                } else {
                    a[a2[i]] = true;
                }
                for (const k in a) diff.push(k);
                return diff;
            }
        }

        var flatten = (a, shallow, r) => {
            if (!r) {
                r = [];
            }
            if (shallow) {
                return r.concat(...a);
            }
            for (i = 0; i < a.length; i++) {
                if (a[i].constructor == Array) {
                    flatten(a[i], shallow, r);
                } else {
                    r.push(a[i]);
                }
            }
            return r;
        };
        console.log(difference([1, 2, 3], [100, 2, 1, 10]));
        console.log(difference([1, 2, 3, 4, 5], [1, [2],
            [3, [
                [4]
            ]],
            [5, 6]
        ]));
        console.log(difference([1, 2, 3], [100, 2, 1, 10]));



        // Write a JavaScript function to sort the following array of objects by title value. 

        var library2 = [{
                author: 'Bill Gates',
                title: 'The Road Ahead',
                libraryID: 1254
            },
            {
                author: 'Steve Jobs',
                title: 'Walter Isaacson',
                libraryID: 4264
            },
            {
                author: 'Suzanne Collins',
                title: 'Mockingjay: The Final Book of The Hunger Games',
                libraryID: 3245
            }
        ];

        function compare_to_sort(x, y) {
            if (x.title < y.title) {
                return -1
            };
            if (x.title > y.title) {
                return 1
            };

            return 0;
        }

        console.log(library2.sort(compare_to_sort));


        //Write a JavaScript function to limit a value inside a certain range. 

        function value_limit(val, min, max) {
            return val < min ? min : (val > max ? max : val);
        }
        console.log(value_limit(7, 1, 12));
        console.log(value_limit(-7, 0, 12));
        console.log(value_limit(15, 0, 12));


        //Write a JavaScript function to calculate the combination of n and r. The formula is : n!/(r!*(n - r)!).

        function product_Range(a, b) {
            var prd = a,
                i = a;
            while (i++ < b) {
                prd *= i;
            }
            return prd;
        }

        function combinations(n, r) {
            if (n == r) {
                return 1;
            } else {
                r = (r < n - r) ? n - r : r;
                return product_Range(r + 1, n) / product_Range(1, n - r);
            }

        }
        console.log(combinations(6, 2));
        console.log(combinations(5, 3));

        //Write a JavaScript function to calculate the extended Euclid Algorithm or extended GCD. 
        function Euclid_gcd(a, b) {
            a = +a;
            b = +b;
            if (a !== a || b !== b) {
                return [NaN, NaN, NaN];
            }
            if (a === Infinity || a === -Infinity || b === Infinity || b === -Infinity) {
                return [Infinity, Infinity, Infinity];
            }

            if ((a % 1 !== 0) || (b % 1 !== 0)) {
                return false;
            }

            var signX = (a < 0) ? -1 : 1,
                signY = (b < 0) ? -1 : 1,
                x = 0,
                y = 1,
                u = 1,
                v = 0,
                q, r, m, n;
            a = Math.abs(a);
            b = Math.abs(b);
            while (a !== 0) {
                q = Math.floor(b / a);
                r = b % a;
                m = x - u * q;
                n = y - v * q;
                b = a;
                a = r;
                x = u;
                y = v;
                u = m;
                v = n;
            }
            return [b, signX * x, signY * y];
        }
        console.log(Euclid_gcd(17, 4));


        //Write a JavaScript function to calculate the falling factorial of a number. Let x be a real number (but usually an integer). Let k be a positive integer. Then x to the (power of) k falling is:  This is called the kth falling factorial power of x. 


        function fallingFactorial(n, k) {
            var i = (n - k + 1),
                r = 1;
            if (n < 0) {
                throw new Error("n must be positive.");
            }
            if (k > n) {
                throw new Error("k cannot be greater than n.");
            }
            while (i <= n) {
                r *= i++;
            }
            return r;
        }
        console.log(fallingFactorial(10, 2));

        //  Write a JavaScript function to calculate degrees between 2 points with inverse Y axis. 

        function pointDirection(x1, y1, x2, y2) {
            return Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
        }
        console.log(pointDirection(1, 0, 12, 0));
        console.log(pointDirection(1, 0, 1, 10));


        // Write a JavaScript program to compute the sum of an array of integers. Example : var array = [1, 2, 3, 4, 5, 6]

        var array_sum = function (my_array) {
            if (my_array.length === 1) {
                return my_array[0];
            } else {
                return my_array.pop() + array_sum(my_array);
            }
        };

        console.log(array_sum([1, 2, 3, 4, 5, 6]));

        //Write a JavaScript program to get the first n Fibonacci numbers. 

        var fibonacci_series = function (n) {
            if (n === 1) {
                return [0, 1];
            } else {
                var s = fibonacci_series(n - 1);
                s.push(s[s.length - 1] + s[s.length - 2]);

                return s;
            }
        };
        console.log(fibonacci_series(8));


        //Write a merge sort program in JavaScript. Samplearray: [34,7,23,32,5,62]Sample output : [5, 7, 23, 32, 34, 62] 

        Array.prototype.merge_Sort = function () {
            if (this.length <= 1) {
                return this;
            }
            var half = parseInt(this.length / 2);
            var left = this.slice(0, half).merge_Sort();
            var right = this.slice(half, this.length).merge_Sort();
            var merge = function (left, right) {
                var arry = [];
                while (left.length > 0 && right.length > 0) {
                    arry.push((left[0] <= right[0]) ? left.shift() : right.shift());
                }
                return arry.concat(left).concat(right);
            };
            return merge(left, right);
        };
        var a = [34, 7, 23, 32, 5, 62];
        console.log(a.merge_Sort());


        //Write a JavaScript program to find the greatest common divisor (gcd) of two positive numbers. 
        var gcd = function (a, b) {
            if (!b) {
                return a;
            }
            return gcd(b, a % b);
        };
        console.log(gcd(2154, 458));

        //Write a JavaScript function to convert an amount to coins. Sample function : amountTocoins(46, [25, 10, 5, 2, 1]) Here 46 is the amount. and 25, 10, 5, 2, 1 are coins. Output : 25, 10, 10, 1 



        function amountTocoins(amount, coins) {
            if (amount === 0) {
                return [];
            } else {
                if (amount >= coins[0]) {
                    let left = (amount - coins[0]);
                    return [coins[0]].concat(amountTocoins(left, coins));
                } else {
                    coins.shift();
                    return amountTocoins(amount, coins);
                }
            }
        }
        console.log(amountTocoins(46, [25, 10, 5, 2, 1]));


        //Write a JavaScript function which says whether a number is perfect.Note : According to Wikipedia : In number theory, a perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its aliquot sum). Equivalently, a perfect number is a number that is half the sum of all of its positive divisors (including itself). 

        function is_perfect(number) {
            var temp = 0;
            for (var i = 1; i <= number / 2; i++) {
                if (number % i === 0) {
                    temp += i;
                }
            }
            if (temp === number && temp !== 0) {
                console.log("It is a perfect number.");
            } else {
                console.log("It is not a perfect number.");
            }
        }

        is_perfect(28);


        //Write a JavaScript function that accepts a number as a parameter and check the number is prime or not. 

        function test_prime(n) {
            if (n === 1) {
                return false;
            } else if (n === 2) {
                return true;
            } else {
                for (var x = 2; x < n; x++) {
                    if (n % x === 0) {
                        return false;
                    }
                }
                return true;
            }
        }
        console.log(test_prime(37));


        // Write a JavaScript function that accepts a string as a parameter and converts the first letter of each word of the string in upper case. 

        //Write a JavaScript function that accepts a string as a parameter and converts the first letter of each word of the string in upper case. 
        function uppercase(str) {
            var array1 = str.split(' ');
            console.log(array1)
            var newarray1 = [];
            for (var x = 0; x < array1.length; x++) {
                console.log(array1[x].charAt(0));
                console.log(array1[x].slice(1));

                newarray1.push(array1[x].charAt(0).toUpperCase() + array1[x].slice(1));
            }

            return newarray1.join(' ');
        }
        console.log(uppercase("the quick brown fox"));

        //Write a JavaScript function that generates a string id (specified length) of random characters. 
        //ID GENERATOR
        function makeid(lengthDesired) {
            var text = "";
            var char_list = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
            for (var i = 0; i < lengthDesired; i++) {
                text += char_list.charAt(Math.floor(Math.random() * char_list.length));
            }
            return text;
        }

        console.log(makeid(8));

        // Write a JavaScript program to sort a list of elements using Heap sort. 
        var array_length; /* to create MAX array */
        function heap_root(input, i) {
            var left = 2 * i + 1;
            var right = 2 * i + 2;
            var max = i;
            if (left < array_length && input[left] > input[max]) {
                max = left;
            }
            if (right < array_length && input[right] > input[max]) {
                max = right;
            }
            if (max != i) {
                swap(input, i, max);
                heap_root(input, max);
            }
        }

        function swap(input, index_A, index_B) {
            var temp = input[index_A];
            input[index_A] = input[index_B];
            input[index_B] = temp;
        }

        function heapSort(input) {
            array_length = input.length;
            for (var i = Math.floor(array_length / 2); i >= 0; i -= 1) {
                heap_root(input, i);
            }
            for (i = input.length - 1; i > 0; i--) {
                swap(input, 0, i);
                array_length--;
                heap_root(input, 0);
            }
        }
        var arr20 = [3, 0, 2, 5, -1, 4, 1];
        heapSort(arr20);
        console.log(arr20);

        //  Write a JavaScript program to sort a list of elements using Insertion sort. 

        const insertion_Sort = (nums) => {
            for (let i = 1; i < nums.length; i++) {
                let j = i - 1;
                let temp = nums[i];
                while (j >= 0 && nums[j] > temp) {
                    nums[j + 1] = nums[j];
                    j--
                };

                nums[j + 1] = temp;
            };
            return nums
        }
        console.log(insertion_Sort([3, 0, 2, 5, -1, 4, 1]));
        console.log(insertion_Sort([2, 6, 5, 12, -1, 3, 8, 7, 1, -4, 0, 23, 1, -55, 20, 37, 54, 210, -23, 7, 483, 9339,
            29, -3, 90, -2, 81, 54, 7372, -92, 93, 93, 18, -43, 21
        ]));

        //Write a JavaScript program to sort a list of elements using Bubble sort. 
        function swap(arr, first_Index, second_Index) {
            var temp = arr[first_Index];
            arr[first_Index] = arr[second_Index];
            arr[second_Index] = temp;
        }

        function bubble_Sort(arr) {
            var len = arr.length,
                i, j, stop;
            for (i = 0; i < len; i++) {
                for (j = 0, stop = len - i; j < stop; j++) {
                    if (arr[j] > arr[j + 1]) {
                        swap(arr, j, j + 1);
                    }
                }
            }
            return arr;
        }
        console.log(bubble_Sort([3, 0, 2, 5, -1, 4, 1]));


        //QUICK SORT
        function quick_Sort(origArray) {
            if (origArray.length <= 1) {
                return origArray;
            } else {
                var left = [];
                var right = [];
                var newArray = [];
                var pivot = origArray.pop();
                var length = origArray.length;
                for (var i = 0; i < length; i++) {
                    if (origArray[i] <= pivot) {
                        left.push(origArray[i]);
                    } else {
                        right.push(origArray[i]);
                    }
                }
                return newArray.concat(quick_Sort(left), pivot,
                    quick_Sort(right));
            }
        }
        var myArray = [3, 0, 2, 5, -1, 4, 1];
        console.log("Original array: " + myArray);
        var sortedArray = quick_Sort(myArray);
        console.log("Sorted array: " + sortedArray);
    </script>

</body>

</html>